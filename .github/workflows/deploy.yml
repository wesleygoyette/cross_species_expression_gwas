name: Deploy to Self-Hosted Runner

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Django tests
      run: |
        cd backend
        python manage.py test
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata (tags, labels) for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
    
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Pre-deployment cleanup
      run: |
        # Stop and remove existing containers
        docker compose down --remove-orphans || true
        
        # Clean up dangling and unused images
        docker image prune -f
        
        # Clean up unused containers
        docker container prune -f
        
        # Clean up build cache to prevent accumulation
        docker builder prune -f --all
    
    - name: Pull latest images
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
    
    - name: Create production environment file
      run: |
        cat > .env << EOF
        SECRET_KEY=${{ secrets.SECRET_KEY }}
        DEBUG=False
        ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
        CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
        MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
        MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
        MYSQL_USER=${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
        EOF
    
    - name: Deploy with Docker Compose
      run: |
        export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        export FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
        docker compose -f docker-compose.prod.yml up -d
    
    - name: Wait for services to be healthy
      run: |
        timeout 300 bash -c 'until docker compose -f docker-compose.prod.yml ps | grep -q "healthy"; do sleep 5; done'
    
    - name: Post-deployment cleanup
      run: |
        # Remove all dangling images (untagged)
        docker image prune -f
        
        # Remove old/unused images but keep currently running ones
        docker images | grep '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}' | grep -v latest | awk '{print $3}' | xargs -r docker rmi || true
        docker images | grep '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}' | grep -v latest | awk '{print $3}' | xargs -r docker rmi || true
        
        # Clean up any remaining unused Docker resources
        docker system prune -f --volumes
        
        # Clean up workspace artifacts but preserve deployment files
        find . -name "*.log" -not -path "./backend/server.log" -delete || true
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
        find . -name "*.pyc" -delete || true
        find . -name ".pytest_cache" -type d -exec rm -rf {} + || true
        find . -name "node_modules/.cache" -type d -exec rm -rf {} + || true