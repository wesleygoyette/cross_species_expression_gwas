name: Deploy to Self-Hosted Runner

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Django tests
      run: |
        cd backend
        python manage.py test
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' 
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata (tags, labels) for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
    
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Backup current deployment
      run: |
        # Tag current images as backup if they exist
        if docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest >/dev/null 2>&1; then
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:backup
        fi
        if docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest >/dev/null 2>&1; then
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:backup
        fi
        
        # Backup current environment file if it exists
        if [ -f .env ]; then
          cp .env .env.backup
        fi
    
    - name: Pre-deployment cleanup
      run: |
        # Stop existing containers but don't remove images yet
        docker compose down --remove-orphans || true
        
        # Clean up dangling images only
        docker image prune -f
        
        # Clean up unused containers
        docker container prune -f
    
    - name: Pull latest images
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
    
    - name: Deploy with Docker Compose
      run: |
        export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        export FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
        export SECRET_KEY=${{ secrets.SECRET_KEY }}
        export ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
        export CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
        export SQLITE_DB_PATH=${{ secrets.SQLITE_DB_PATH }}
        docker compose -f docker-compose.prod.yml up -d
    
    - name: Wait for services to be healthy
      id: health_check
      continue-on-error: true
      run: |
        echo "Waiting for services to become healthy..."
        if timeout 300 bash -c 'until docker compose -f docker-compose.prod.yml ps | grep -q "healthy"; do sleep 5; done'; then
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment successful - all services are healthy"
          exit 0
        else
          echo "deployment_status=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Deployment failed - services did not become healthy within 5 minutes"
          exit 1
        fi
    
    - name: Automatic Rollback
      if: always() && steps.health_check.outputs.deployment_status == 'failed'
      run: |
        echo "üîÑ Starting automatic rollback due to failed health checks..."
        
        # Stop failed deployment
        docker compose down --remove-orphans || true
        
        # Check if backup images exist
        if docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:backup >/dev/null 2>&1 && 
           docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:backup >/dev/null 2>&1; then
          
          echo "üì¶ Restoring previous working deployment..."
          
          # Restore backup environment if it exists
          if [ -f .env.backup ]; then
            cp .env.backup .env
          fi
          
          # Deploy with backup images
          export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:backup
          export FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:backup
          export SQLITE_DB_PATH=${{ secrets.SQLITE_DB_PATH }}
          docker compose -f docker-compose.prod.yml up -d
          
          # Wait for rollback to be healthy
          if timeout 180 bash -c 'until docker compose -f docker-compose.prod.yml ps | grep -q "healthy"; do sleep 5; done'; then
            echo "‚úÖ Rollback successful - previous version restored and healthy"
          else
            echo "‚ùå Rollback failed - manual intervention required"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è No backup images available for rollback - manual intervention required"
          echo "This appears to be the first deployment or backup images were not preserved"
          exit 1
        fi
    
    - name: Post-deployment cleanup
      if: steps.health_check.outputs.deployment_status == 'success'
      run: |
        echo "üßπ Cleaning up after successful deployment..."
        
        # Remove backup images since deployment was successful
        docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:backup || true
        docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:backup || true
        
        # Remove backup environment file
        rm -f .env.backup || true
        
        # Remove all dangling images (untagged)
        docker image prune -f
        
        # Clean up old images but preserve latest and backup tags
        docker images | grep '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}' | grep -v -E 'latest|backup' | awk '{print $3}' | xargs -r docker rmi || true
        docker images | grep '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}' | grep -v -E 'latest|backup' | awk '{print $3}' | xargs -r docker rmi || true
        
        # Clean up any remaining unused Docker resources
        docker system prune -f --volumes
        
        # Clean up workspace artifacts but preserve deployment files
        find . -name "*.log" -not -path "./backend/server.log" -delete || true
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
        find . -name "*.pyc" -delete || true
        find . -name ".pytest_cache" -type d -exec rm -rf {} + || true
        find . -name "node_modules/.cache" -type d -exec rm -rf {} + || true